{
    "status": "Completed",
    "totalResult": "31340",
    "bin": [
        {
            "type": "source",
            "label": "Source",
            "value": "CloudHelp",
            "ndocs": "27673"
        },
        {
            "type": "source",
            "label": "Source",
            "value": "discussion",
            "ndocs": "3448"
        },
        {
            "type": "source",
            "label": "Source",
            "value": "sfdcarticles",
            "ndocs": "219"
        },
        {
            "type": "ADSKContentGroup",
            "label": "Information Category",
            "value": "Developer's Documentation",
            "ndocs": "27286"
        },
        {
            "type": "ADSKContentGroup",
            "label": "Information Category",
            "value": "Learn & Explore",
            "ndocs": "419"
        },
        {
            "type": "ADSKContentGroup",
            "label": "Information Category",
            "value": "Troubleshooting",
            "ndocs": "199"
        },
        {
            "type": "MediaType",
            "label": "Media",
            "value": "Text Only",
            "ndocs": "31315"
        },
        {
            "type": "MediaType",
            "label": "Media",
            "value": "Video",
            "ndocs": "25"
        },
        {
            "type": "ADSKUserType",
            "label": "User Type",
            "value": "Developer",
            "ndocs": "26877"
        },
        {
            "type": "ADSKUserType",
            "label": "User Type",
            "value": "User",
            "ndocs": "4463"
        },
        {
            "type": "ADSKKnowledgeSource",
            "label": "Knowledge Source",
            "value": "Product Documentation",
            "ndocs": "27673"
        },
        {
            "type": "ADSKKnowledgeSource",
            "label": "Knowledge Source",
            "value": "Accepted Solutions In Forums",
            "ndocs": "3448"
        },
        {
            "type": "ADSKKnowledgeSource",
            "label": "Knowledge Source",
            "value": "Technical Support",
            "ndocs": "219"
        },
        {
            "type": "ADSKContentType",
            "label": "Content Type",
            "value": "Reference",
            "ndocs": "26975"
        },
        {
            "type": "ADSKContentType",
            "label": "Content Type",
            "value": "Task",
            "ndocs": "136"
        },
        {
            "type": "ADSKContentType",
            "label": "Content Type",
            "value": "Concept",
            "ndocs": "53"
        },
        {
            "type": "ADSKContentProvider",
            "label": "Content Provider",
            "value": "Autodesk",
            "ndocs": "27892"
        },
        {
            "type": "ADSKContentProvider",
            "label": "Content Provider",
            "value": "Individual User",
            "ndocs": "3448"
        },
        {
            "type": "experiencelevel",
            "label": "Skill Level",
            "value": "Advanced",
            "ndocs": "26877"
        },
        {
            "type": "experiencelevel",
            "label": "Skill Level",
            "value": "Intermediate",
            "ndocs": "192"
        },
        {
            "type": "experiencelevel",
            "label": "Skill Level",
            "value": "Beginner",
            "ndocs": "5"
        }
    ],
    "entries": {
        "item": [
            {
                "url": "https://help.autodesk.com/cloudhelp/2023/ENU/Inventor-API/files/AngularGeneralDimension.htm",
                "title": "AngularGeneralDimension Object",
                "snippet": "<span class=\"vivbold qt0\"> AngularGeneralDimension Object </span> Derived from: GeneralDimension <span class=\"vivbold qt0\"> Object </span> Description The <span class=\"vivbold qt0\"> AngularGeneralDimension object </span> represents an angular general dimension placed on a sheet.",
                "source": "CloudHelp",
                "shortDescription": "AngularGeneralDimension Object",
                "publishDate": "2023-11-06",
                "topicId": "GUID-587454C3-2D52-4DBF-844A-A47E1320F26E",
                "caasKey": "caas/CloudHelp/cloudhelp/2023/ENU/Inventor-API/files/AngularGeneralDimension-htm.html",
                "knowledgeSource": [
                    "Product Documentation"
                ]
            },
            {
                "url": "https://forums.autodesk.com/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Differentiate-between-dimension-type/td-p/11139795",
                "title": "Differentiate between dimension type",
                "snippet": "According to this help article, you can check Type property of the dimension  <span class=\"vivbold qt0\"> object </span> .If dimensionObj.Type = ObjectTypeEnum.kAngularGeneralDimensionObject Then 'do something with angular dimension Eend If Or if you want to do some specific task with dimension (depending on its type) you can cast the dimension to one of the derived type (specific type of dimension)  <span class=\"vivbold qt0\"> AngularGeneralDimension </span> , DiameterGeneralDimension, LinearGeneralDimension, RadiusGeneralDimension Dim dimensionObj As GeneralDimension = ThisDrawing.Document.SelectSet(1) Dim angularDim As  <span class=\"vivbold qt0\"> AngularGeneralDimension </span>  = TryCast(dimensionObj,  <span class=\"vivbold qt0\"> AngularGeneralDimension </span> ) The angular dim should be valid  <span class=\"vivbold qt0\"> AngularGeneralDimension </span>  or Nothing According to this help article, you can check Type property of the dimension  <span class=\"vivbold qt0\"> object </span> .If dimensionObj.Type = ObjectTypeEnum.kAngularGeneralDimensionObject Then 'do something with angular dimension Eend If Or if you want to do some specific task with dimension (depending on its type) you can cast the dimension to one of the derived type (specific type of dimension)  <span class=\"vivbold qt0\"> AngularGeneralDimension </span> , DiameterGeneralDimension, LinearGeneralDimension, RadiusGeneralDimension Dim dimensionObj As GeneralDimension = ThisDrawing.Document.SelectSet(1) Dim angularDim As  <span class=\"vivbold qt0\"> AngularGeneralDimension </span>  = TryCast(dimensionObj,  <span class=\"vivbold qt0\"> AngularGeneralDimension </span> ) The angular dim should be valid  <span class=\"vivbold qt0\"> AngularGeneralDimension </span>  or Nothing",
                "source": "discussion",
                "shortDescription": "Hi\n\n \n\nI just could collect all the dimensions from a drawing file using API. Could anyone please let me know how to differentiate according to type of dimension? In other words, I just need to have dimensions of type radial, angular and diametrical dimensions only.",
                "publishDate": "2022-04-30",
                "caasKey": "caas/discussion/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Differentiate-between-dimension-type/td-p/11139795.html",
                "sourceLabel": "Forum",
                "knowledgeSource": [
                    "Accepted Solutions In Forums"
                ]
            },
            {
                "url": "https://forums.autodesk.com/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Get-Drawing-curves-entities-a-dimension-is-attached-to/td-p/12760835",
                "title": "Get Drawing curves/entities a dimension is attached to",
                "snippet": "I was not able to get an \" <span class=\"vivbold qt0\"> AngularGeneralDimensions </span> \" collection  <span class=\"vivbold qt0\"> object </span>  under \"GeneralDimensions\" but I managed to check the type of each \"GeneralDimension\" inside \"GeneralDimensions\" and then if it was type of \"kAngularGeneralDimensionObject\" then I converted the type to \" <span class=\"vivbold qt0\"> AngularGeneralDimension </span> \" and worked from there.",
                "source": "discussion",
                "shortDescription": "Hi,\n\n \n\nIs there a way to find the drawing curves (in my case 2 lines for an angular dim) of a dimension?\n\n \n\nI had a quick look and can't seem to find a way to retrieve the entities a dimension is attached to from the \"GeneralDimension\" object.\n\n \n\nAny pointers?\n\n \n\nCheers",
                "publishDate": "2024-05-08",
                "caasKey": "caas/discussion/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Get-Drawing-curves-entities-a-dimension-is-attached-to/td-p/12760835.html",
                "sourceLabel": "Forum",
                "knowledgeSource": [
                    "Accepted Solutions In Forums"
                ]
            },
            {
                "url": "https://forums.autodesk.com/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Angle-dimension-to-virtual-perpendicular/td-p/12335633",
                "title": "Angle dimension to 'virtual' perpendicular",
                "snippet": "To use that, you would have to get a reference to the WorkPlane  <span class=\"vivbold qt0\"> object </span>  within the model, then supply that as input into the method.",
                "source": "discussion",
                "shortDescription": "Hi iLogic experts,\n\nI'm an iLogic dummy and need some help to 'get me by'.\n\nI need a drawing (idw) rule that'll make a sketch on a drawing view, then draw a hash mark at a vertex that is perpendicular to another line in the view. The reason for this is to give Inventor a function that it lacks out-of-the-box (but should have!) for making angle dimensions on a 'virtual' line (like dimensioning the end of a pipe that's mitered so the chop saw guys can setup their saw angle from 0 deg).\n\nThe work-flow would be this:\n\n1. run the rule\n\n2. pick the drawing view\n\n3. pick the line\n\n4. pick the vertex (could be 2 crossing lines, a point, end of a line, etc.).\n\nResult: The rule automatically adds a hash line, starting at the picked vertex, and vectoring perpendicular to the picked line, with a length at a specified distance (found inside the rule - don't want user input for this). The direction of the hash mark with respect to the picked line doesn't matter.\n\nThis link should clarify what I'm after.\n\nIncidentally, here's an idea of how bad an iLogic guy I am.\n\nEvery time I set out to make a rule, it takes me about a week to get back into 'coding'.\n\nThen it takes me about another 3 weeks to try to figure out how to put stuff together.\n\nAnd when I finally 'give up', I come in here and they always do it another way, so all my work goes down the toilet.\n\nSo at this point in my life, I'm just gonna 'ask the experts' instead of 'reinventing the wheel'.\n\nSound like a plan?!\n\nSo maybe someone has a rule like this already made that they'd like to share?\n\nEither way, many thanks for your help!\n\n \n\nUPDATE:\n\nAnother possibility is a rule that turns on the FG part's StartPlane and EndPlane.\n\nThat would be easiest, but it would not be best, b/c many of the parts have end treatments that shorten the member's end away from the Start/EndPlanes.",
                "publishDate": "2023-10-27",
                "caasKey": "caas/discussion/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Angle-dimension-to-virtual-perpendicular/td-p/12335633.html",
                "sourceLabel": "Forum",
                "knowledgeSource": [
                    "Accepted Solutions In Forums"
                ]
            },
            {
                "url": "https://forums.autodesk.com/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Deleting-all-dimensions-on-a-specific-view/td-p/9783658",
                "title": "Deleting all dimensions on a specific view",
                "snippet": "So there's not way to find the dimensions through the view  <span class=\"vivbold qt0\"> object </span> ... I rewrote the function from here a bit to use for this: See if it works for you Sub Main Dim oView As DrawingView = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kDrawingViewFilter, \"Pick view\") For Each oDim As GeneralDimension In GetDrawingDimForView(oView) oDim.Delete Next End Sub Function GetDrawingDimForView(oView As DrawingView) As ObjectCollection Dim oDrawDimsForView As ObjectCollection oDrawDimsForView = ThisApplication.TransientObjects.CreateObjectCollection Dim oDrawDims As DrawingDimensions oDrawDims = oView.Parent.DrawingDimensions Dim oDrawDimIterator As DrawingDimension For Each oDrawDimIterator In oDrawDims Select Case oDrawDimIterator.Type Case kLinearGeneralDimensionObject Dim oLinearDim As LinearGeneralDimension oLinearDim = oDrawDimIterator If oLinearDim.IntentOne.Geometry.Parent Is oView Then oDrawDimsForView.Add(oDrawDimIterator) End If Case kRadiusGeneralDimensionObject Dim oRadiusDim As RadiusGeneralDimension oRadiusDim = oDrawDimIterator If oRadiusDim.Intent.Geometry.Parent Is oView Then oDrawDimsForView.Add(oDrawDimIterator) End If Case kDiameterGeneralDimensionObject Dim oDiameterDim As DiameterGeneralDimension oDiameterDim = oDrawDimIterator If oDiameterDim.Intent.Geometry.Parent Is oView Then oDrawDimsForView.Add(oDrawDimIterator) End If Case kAngularGeneralDimensionObject Dim oAngularDim As  <span class=\"vivbold qt0\"> AngularGeneralDimension </span>  oAngularDim = oDrawDimIterator If oAngularDim.IntentOne.Geometry.Parent Is oView Then oDrawDimsForView.Add(oDrawDimIterator) End If Case Else 'Case is not handled...",
                "source": "discussion",
                "shortDescription": "Hi,\n\n \n\nI want delete all dimensions on a specific view. I using a rule that remove all dimensions on a sheet (as showed below), but I need remove only on a view. What is the change I need to make to the rule?\n\n ActiveSheet = ThisDrawing.Sheet(\"A3:1\")\nDim oSheet As Sheet = ThisDoc.Document.ActiveSheet\n\nDim oView As DrawingView = ActiveSheet.View(\"FRONTAL\").View\nDim oDoc As Document =oView.ReferencedDocumentDescriptor.ReferencedDocument\n\n'REMOVE DIMENSIONS \n\nDim oDim As DrawingDimension\n\nFor Each oDim In oSheet.DrawingDimensions\n    oDim.Delete\nNext 'Dim\n\n ",
                "publishDate": "2020-10-05",
                "caasKey": "caas/discussion/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Deleting-all-dimensions-on-a-specific-view/td-p/9783658.html",
                "sourceLabel": "Forum",
                "knowledgeSource": [
                    "Accepted Solutions In Forums"
                ]
            },
            {
                "url": "https://forums.autodesk.com/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Arrange-Angular-Dimensions/td-p/11751825",
                "title": "Arrange Angular Dimensions",
                "snippet": "I've tried a few things based the  <span class=\"vivbold qt0\"> AngularGeneralDimension </span>  API  <span class=\"vivbold qt0\"> object </span> : Note that these are not dimensions that are programmatically placed, but just manually placed dimensions that need to be arranged programmatically after some view updates ( size changes, scaling, etc. ).",
                "source": "discussion",
                "shortDescription": "How do we set the text placement for existing angular dimensions? \n\n\nAttached are a couple of 2022 files to look at, with a few iLogic rules, but I'm not seeing a way to set the text placement consistently or predictably. I'm probably overlooking something though? \n\n\n \n\n\nI've tried a few things based the AngularGeneralDimension API object:\n\n\n\n\n\n\nNote that these are not dimensions that are programmatically placed, but just manually placed dimensions that need to be arranged programmatically after some view updates ( size changes, scaling, etc. ).\n\n\n \n\n\nSo for instance, after some update, the placed angular dimensions look something like this:\n\n\n \n\n\n\n\n\n \n\n\nThis is the result I'm looking for:\n\n\n \n\n\n\n \n \n \n\n\nThank you!\n\n\nCurtis",
                "publishDate": "2023-02-13",
                "caasKey": "caas/discussion/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Arrange-Angular-Dimensions/td-p/11751825.html",
                "sourceLabel": "Forum",
                "knowledgeSource": [
                    "Accepted Solutions In Forums"
                ]
            },
            {
                "url": "https://forums.autodesk.com/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Create-Angle-Dim-Like-This-/td-p/12297123",
                "title": "Create Angle Dim Like This?",
                "snippet": "Dim Sheet_1 = ThisDrawing.Sheets.ItemByName(\"Sheet:1\") Dim VIEW2 = Sheet_1.DrawingViews.ItemByName(\"VIEW2\") Dim genDims = Sheet_1.DrawingDimensions.GeneralDimensions Dim Bottom = VIEW2.GetIntent(\"Bottom\") Dim ChamferFace = VIEW2.GetIntent(\"ChamferFace\") ThisApplication.DrawingOptions.CenterDimensionText = True Dim PointOnSheet As DocumentUnitsPoint2d = ThisDrawing.Geometry.Point2d(3.4, 6) Dim angDim1 = genDims.AddAngular(\"Angular Dim 1\", PointOnSheet, Bottom, ChamferFace) MsgBox(\"pause to observe original position\", , \"iLogic\") 'get API  <span class=\"vivbold qt0\"> object </span>  for the dim Dim angDim As  <span class=\"vivbold qt0\"> AngularGeneralDimension </span>  = angDim1.NativeEntity 'get units conversion Dim UOM As UnitsOfMeasure = ThisDoc.Document.UnitsOfMeasure oConverson = UOM.ConvertUnits(1, UOM.LengthUnits,UnitsTypeEnum.kDatabaseLengthUnits) PointOnSheet = ThisDrawing.Geometry.Point2d(3.4, 5.5) Dim oTG As TransientGeometry = ThisApplication.TransientGeometry Dim NewPoint As Point2d = oTG.CreatePoint2d(PointOnSheet.X * oConverson, PointOnSheet.Y * oConverson) angDim.UseQuadrant = False 'change position of the dim text angDim.Text.Origin = NewPoint Edit: actually the AddAngular has an optional parameter to specify to use the quadrant directly.",
                "source": "discussion",
                "shortDescription": "Does anyone know what we need to do to get the \"alternate angle\" or whatever it is called?\n\n\n \n\n\nsee the attached 2024 drawing for an example.\n\n\n \n\n\nThanks!\n\n\nCurtis\n\n\n \n\n\nTrying to get this result using the code below:\n\n\n\n\n\n \nDim Sheet_1 = ThisDrawing.Sheets.ItemByName(\"Sheet:1\")\nDim VIEW3 = Sheet_1.DrawingViews.ItemByName(\"VIEW2\")\nDim genDims = Sheet_1.DrawingDimensions.GeneralDimensions\n\nDim Bottom = VIEW3.GetIntent(\"Bottom\")\nDim ChamferFace = VIEW3.GetIntent(\"ChamferFace\")\n\nDim PointOnSheet As DocumentUnitsPoint2d = ThisDrawing.Geometry.Point2d(3.4, 5.5)\nDim angDim1 = genDims.AddAngular(\"Angular Dim 1\", PointOnSheet, Bottom, ChamferFace)\n\n\n\n \n\n\n \n\n\nBut I'm getting this result:\n\n\n\n\n\n \n\n\n ",
                "publishDate": "2023-10-10",
                "caasKey": "caas/discussion/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Create-Angle-Dim-Like-This-/td-p/12297123.html",
                "sourceLabel": "Forum",
                "knowledgeSource": [
                    "Accepted Solutions In Forums"
                ]
            },
            {
                "url": "https://forums.autodesk.com/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Select-all-dimensions-in-one-view/td-p/11538419",
                "title": "Select all dimensions in one view",
                "snippet": "Sub Main oObj = ThisApplication.CommandManager.Pick(SelectionFilterEnum.kDrawingViewFilter, oPrompt) If IsNothing(oObj) OrElse (TypeOf oObj Is DrawingView = False) Then Exit Sub Dim oView As DrawingView = oObj Dim oSheet As Sheet = oView.Parent Dim oDDims As DrawingDimensions = oSheet.DrawingDimensions Dim oViewDims As New List(Of DrawingDimension) For Each oDDim As DrawingDimension In oDDims If Not oDDim.Attached Then Continue For Dim oDimView As DrawingView = GetDimensionView(oDDim) If IsNothing(oDimView) Then Continue For If oDimView Is oView Then If Not oViewDims.Contains(oDDim) Then oViewDims.Add(oDDim) End If Next MsgBox(\"There were \" & oViewDims.Count & \" dimensions found for the selected view.\", , \"\") If oViewDims.Count > 0 Then Dim oDDoc As DrawingDocument = oView.Parent.Parent For Each oViewD In oViewDims oDDoc.SelectSet.Select(oViewD) Next End If End Sub Function GetDimensionView(oDDim As DrawingDimension) As DrawingView If IsNothing(oDDim) OrElse oDDim.Attached = False Then Return Nothing Dim oGIntents As New List(Of GeometryIntent) Select Case TypeName(oDDim) Case \" <span class=\"vivbold qt0\"> AngularGeneralDimension </span> \" Dim oAGD As  <span class=\"vivbold qt0\"> AngularGeneralDimension </span>  = oDDim Try : oGIntents.Add(oAGD.IntentOne) : Catch : End Try Try : oGIntents.Add(oAGD.IntentTwo) : Catch : End Try Try : oGIntents.Add(oAGD.IntentThree) : Catch : End Try Case \"DiameterGeneralDimension\" Dim oDGD As DiameterGeneralDimension = oDDim Try : oGIntents.Add(oDGD.Intent) : Catch : End Try Case \"LinearGeneralDimension\" Dim oLGD As LinearGeneralDimension = oDDim Try : oGIntents.Add(oLGD.IntentOne) : Catch : End Try Try : oGIntents.Add(oLGD.IntentTwo) : Catch : End Try Try : oGIntents.Add(oLGD.IntentThree) : Catch : End Try Try : oGIntents.Add(oLGD.VirtualArcPosition) : Catch : End Try Case \"RadiusGeneralDimension\" Dim oRGD As RadiusGeneralDimension = oDDim Try : oGIntents.Add(oRGD.Intent) : Catch : End Try Case \"OrdinateDimension\" Dim oOD As OrdinateDimension = oDDim Try : oGIntents.Add(oOD.Intent) : Catch : End Try End Select If oGIntents.Count = 0 Then Return Nothing For Each oGI As GeometryIntent In oGIntents If oGI.Geometry IsNot Nothing Then If TypeOf oGI.Geometry Is DrawingCurve Then Dim oDC As DrawingCurve = oGI.Geometry Return oDC.Parent 'a DrawingView  <span class=\"vivbold qt0\"> object </span>  End If End If Next Return Nothing End Function If this solved your problem, or answered your question, please click ACCEPT SOLUTION .",
                "source": "discussion",
                "shortDescription": "Hello,\n\n \n\nHow to select all dimensions in one view? \nOr how to check to which view the dimension belongs?\n\n\n \n\n \n\n ",
                "publishDate": "2022-11-08",
                "caasKey": "caas/discussion/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Select-all-dimensions-in-one-view/td-p/11538419.html",
                "sourceLabel": "Forum",
                "knowledgeSource": [
                    "Accepted Solutions In Forums"
                ]
            },
            {
                "url": "https://forums.autodesk.com/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/AddAngularforeshotened-method-doesn-t-work/td-p/9786038",
                "title": "AddAngularforeshotened method doesn't work",
                "snippet": "(Centermark  <span class=\"vivbold qt0\"> object </span> .) in the code i am creating a line the represents the vertical line of the centermark, going up. the  <span class=\"vivbold qt0\"> objects </span>  should have the right type but the i get an error when i add the dimension.",
                "source": "discussion",
                "shortDescription": "Hi, \n\n \n\nI want to add an angular foreshortened dimension in a drawing\n\n\n\n \n\nThis should be possible with the AddAngularForeshortened function.\n\n \n\nSituation:\n\nFirst i select a drawingcurve, added by including a skecth from the assembly. this is a drawingcurve object.\n\nsecond i select the centermark. (Centermark object.)\n\nin the code i am creating a line the represents the vertical line of the centermark, going up. \n\n \n\nthe objects should have the right type but the i get an error when i add the dimension. \n\nI tried the code with 2 drawingcurve object and this worked, but somehow i can't get the centermark line to work. \n\n \n\nIs there any way to get this to work with a drawingcurve and a centermark?Sub CreateAngularForeshortenedDim\n    ' Open a drawing document and select two parallel linear curves in same drawing view first.\n    Dim oApp As Inventor.Application\n    Set oApp = ThisApplication\n    \n    Dim oDoc As DrawingDocument\n    Set oDoc = oApp.ActiveDocument\n\n    Dim oCurve1 As DrawingCurve, oCurve2 As Centermark\n    Set oCurve1 = oDoc.SelectSet(1).Parent\n    Set oCurve2 = oDoc.SelectSet(2)\n    \n    Dim oSheet As Sheet\n    Set oSheet = oDoc.ActiveSheet\n     \n    Dim oLine As Line2d\n    Set oLine = oApp.TransientGeometry.CreateLine2d(oCurve2.Position, oCurve2.ExtensionPointTwoDirection)\n    \n    Dim oAngle As Boolean\n    oAngle = False\n    \n    ' Create two GeometryIntent based on the selected drawing curve segments.\n    Dim oIntent1 As GeometryIntent, oIntent2 As GeometryIntent, oIntent3 As GeometryIntent\n    Set oIntent1 = oSheet.CreateGeometryIntent(oCurve1)\n    Set oIntent2 = oSheet.CreateGeometryIntent(oLine)\n    Set oIntent3 = oSheet.CreateGeometryIntent(oCurve2)\n    \n    Dim oTextPos As Point2d\n    Set oTextPos = oApp.TransientGeometry.CreatePoint2d(20, 30)\n    \n    ' Create the foreshortened dimension\n    Dim oAngularForeshortenedDim As AngularGeneralDimension\n    Set oAngularForeshortenedDim = oSheet.DrawingDimensions.GeneralDimensions.AddAngularForeshortened(oTextPos, oIntent1, oIntent2, , True, True, False)\nEnd Sub\n\n \n\nKind regards, \n\n \n\nGeert",
                "publishDate": "2020-10-06",
                "caasKey": "caas/discussion/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/AddAngularforeshotened-method-doesn-t-work/td-p/9786038.html",
                "sourceLabel": "Forum",
                "knowledgeSource": [
                    "Accepted Solutions In Forums"
                ]
            },
            {
                "url": "https://forums.autodesk.com/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Exporting-a-dimension-list-to-an-excel-sheet/td-p/11836356",
                "title": "Exporting a dimension list to an excel sheet",
                "snippet": "This approach makes your code more readable and you can work with strongly-typed variable inside the methods (intellisense works much better) Sub Main() Dim sheet As Sheet = ThisDrawing.ActiveSheet.Sheet For Each drawingDimension As DrawingDimension In sheet.DrawingDimensions TryProcessAngularGeneralDimension(TryCast(drawingDimension,  <span class=\"vivbold qt0\"> AngularGeneralDimension </span> )) TryProcessDiameterGeneralDimension(TryCast(drawingDimension, DiameterGeneralDimension)) TryProcessLinearGeneralDimension(TryCast(drawingDimension, LinearGeneralDimension)) TryProcessRadiusGeneralDimension(TryCast(drawingDimension, RadiusGeneralDimension)) Next End Sub Private Sub TryProcessAngularGeneralDimension(dimension As  <span class=\"vivbold qt0\"> AngularGeneralDimension </span> ) If dimension Is Nothing Then Return 'TODO: Do something useful with  <span class=\"vivbold qt0\"> AngularGeneralDimension </span>  End Sub Private Sub TryProcessDiameterGeneralDimension(dimension As DiameterGeneralDimension) If dimension Is Nothing Then Return 'TODO: Do something useful with DiameterGeneralDimension End Sub Private Sub TryProcessLinearGeneralDimension(dimension As LinearGeneralDimension) If dimension Is Nothing Then Return 'TODO: Do something useful with LinearGeneralDimension End Sub Private Sub TryProcessRadiusGeneralDimension(dimension As RadiusGeneralDimension) If dimension Is Nothing Then Return 'TODO: Do something useful with RadiusGeneralDimension End Sub Hi, Ok but I have this error: System.MissingMemberException: Le membre public 'DimensionType' du type 'RadiusGeneralDimension' est introuvable. à Microsoft.VisualBasic.CompilerServices.LateBinding.LateGet( <span class=\"vivbold qt0\"> Object </span>  o, Type objType, String name,  <span class=\"vivbold qt0\"> Object </span> [] args, String[] paramnames, Boolean[] CopyBack) à Microsoft.VisualBasic.CompilerServices.NewLateBinding.LateGet( <span class=\"vivbold qt0\"> Object </span>  Instance, Type Type, String MemberName,  <span class=\"vivbold qt0\"> Object </span> [] Arguments, String[] ArgumentNames, Type[] TypeArguments, Boolean[] CopyBack) à ThisRule.Main() à Autodesk.iLogic.Exec.AppDomExec.ExecRuleInAssembly(Assembly assem) à iLogic.RuleEvalContainer.ExecRuleEval(String execRule) And I can't figure out where it comes from.",
                "source": "discussion",
                "shortDescription": "Hello,\n\nI have a problem with the rule I wrote, it exports all the dimensions and tolerance and position to an Excel sheet.\nThe problem is that for the radius dimensions the rule does not export and moreover I have an error and I can't find out where the problem comes from. Can anyone help me?\n\nThanks\n\n \nAddReference \"Microsoft.Office.Interop.Excel.dll\"\nImports exe = Microsoft.Office.Interop.Excel\n\n\nDim oXLFile As String = \"C:\\TravailVault\\revuplan.xlsx\"\nDim oSheet As String = \"Feuil1\"\n\n\nDim oExcel As New Microsoft.Office.Interop.Excel.ApplicationClass\nDim oWB As Microsoft.Office.Interop.Excel.Workbook = oExcel.Workbooks.Add'.Open(oXLFile)\nDim oWS As Microsoft.Office.Interop.Excel.Worksheet = oWB.Worksheets.Item(oSheet)\n\nDim oCells As Microsoft.Office.Interop.Excel.Range = oWS.Cells\n\n'oCells.item(2,1).value= b.Text.Text.ToString\n\nDim a As Inventor.DrawingDocument = ThisDrawing.Document\nDim s As Inventor.Sheet = a.ActiveSheet\n\nDim i As Integer = 1\n'Dim E As Integer = Nombre_de_vue\n\nDim ord\nDim abss\n\nDim Tol_ang = iProperties.Value(\"Custom\", \"Tol_ang\")\nDim Tol_line = iProperties.Value(\"Custom\", \"Tol_line\")\nDim Tol_cham = iProperties.Value(\"Custom\", \"Tol_cham\")\nDim Tol_cong = iProperties.Value(\"Custom\", \"Tol_cong\")\n\n\noCells.Item(1, 2).value = \"Cote\"\noCells.Item(1, 3).value = \"Tolerance Superieur\"\noCells.Item(1, 4).value = \"Tolerance inferieur\"\noCells.Item(1, 1).value = \"Position cote\"\n\n\n\n \nFor Each b As Inventor.DrawingDimension In s.DrawingDimensions\n\tDim v As Integer = b.Text.Origin.X\n\n\tDim y As Integer = b.Text.Origin.Y\n\n\tIf s.Size = 9997 Then 'format de feuille\n\t\tIf s.Orientation = 10243 Then 'Portrait\n\n\t\t\tIf v<5.75 Then\n\t\t\t\tord = \"D\"\n\t\t\tEnd If\n\n\t\t\tIf v >5.75 Then\n\t\t\t\tIf x<10.5 Then\n\t\t\t\t\tord = \"C\"\n\t\t\t\tEnd If\n\t\t\tEnd If\n\n\t\t\tIf v >10.5 Then\n\t\t\t\tIf x<15.25 Then\n\t\t\t\t\tord = \"B\"\n\t\t\t\tEnd If\n\t\t\tEnd If\n\n\t\t\tIf v >15.25 Then\n\t\t\t\tord = \"A\"\n\t\t\tEnd If\n\n\t\t\tIf y < 7.925 Then\n\t\t\t\tabss = \"1\"\n\t\t\tEnd If\n\n\t\t\tIf y >7.925 Then\n\t\t\t\tIf x<14.85 Then\n\t\t\t\t\tabss = \"2\"\n\t\t\t\tEnd If\n\t\t\tEnd If\n\n\n\t\t\tIf y >14.85 Then\n\t\t\t\tIf x<21.775 Then\n\t\t\t\t\tabss = \"3\"\n\t\t\t\tEnd If\n\t\t\tEnd If\n\n\t\t\tIf y >21.775 Then\n\n\t\t\t\tabss = \"4\"\n\t\t\tEnd If\n\t\tEnd If\n\t\tIf s.Orientation = 10242 Then 'Paysage\n\n\t\t\tIf v<7.925 Then\n\t\t\t\tord = \"D\"\n\t\t\tEnd If\n\n\t\t\tIf v >7.925 Then\n\t\t\t\tIf x<14.85 Then\n\t\t\t\t\tord = \"C\"\n\t\t\t\tEnd If\n\t\t\tEnd If\n\n\t\t\tIf v >14.85 Then\n\t\t\t\tIf x<21.775 Then\n\t\t\t\t\tord = \"B\"\n\t\t\t\tEnd If\n\t\t\tEnd If\n\n\t\t\tIf v >21.775 Then\n\t\t\t\tord = \"A\"\n\t\t\tEnd If\n\n\t\t\tIf y < 5.75 Then\n\t\t\t\tabss = \"1\"\n\t\t\tEnd If\n\n\t\t\tIf y >5.75 Then\n\t\t\t\tIf x<10.5 Then\n\t\t\t\t\tabss = \"2\"\n\t\t\t\tEnd If\n\t\t\tEnd If\n\n\n\t\t\tIf y >10.5 Then\n\t\t\t\tIf x<15.25 Then\n\t\t\t\t\tabss = \"3\"\n\t\t\t\tEnd If\n\t\t\tEnd If\n\n\t\t\tIf y >15.25 Then\n\n\t\t\t\tabss = \"4\"\n\t\t\tEnd If\n\n\t\tEnd If\n\n\n\tEnd If\nIf b.DimensionType = DimensionTypeEnum.kArcLengthForeshortenedDimensionType Then\n\t\n\t\tIf b.Tolerance.ToleranceType = 31236 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31244 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31235 Then\n\t\t\tDim du As Double = \"+\" & (b.Tolerance.Upper * 10)\n\t\t\tDim dl As Double = \"-\" & (b.Tolerance.Upper * 10)\n\t\t\t'MsgBox(\"+\"&(b.Tolerance.Upper*10).ToString)\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10'du '\"=\"+\"\" &(b.Tolerance.Upper*10)'\"p\"'\"+\" & b.Tolerance.Upper*10\n\t\t\toCells.Item(i, 4).value = dl'\"-\" &(b.Tolerance.Lower*10)'\"q\"'\"-\" &b.Tolerance.Lower*10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31246 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))'Replace(b.Text.Text.ToString,\"-\",\"\")\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))\n\t\t\toCells.Item(i, 3).value = Tol_line\n\t\t\toCells.Item(i, 4).value = \"-\" & Tol_line\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\n\t\n\tEnd If\n\nIf b.DimensionType = DimensionTypeEnum.kAngularDimensionType Then  'Partie cote angulaire\n\n\n\n\n\t\tIf b.Tolerance.ToleranceType = 31236 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = ((b.Tolerance.Upper * 180) / PI) & \"°\"\n\t\t\toCells.Item(i, 4).value = ((b.Tolerance.Lower * 180) / PI) & \"°\"\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = Tol_ang '((b.Tolerance.Upper * 180) / PI) & \"°\"\n\t\t\toCells.Item(i, 4).value = Tol_ang'((b.Tolerance.Lower * 180) / PI) & \"°\"\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31235 Then\n\t\t\tDim du As Double = \"+\" & ((b.Tolerance.Upper * 180) / PI)\n\t\t\tDim dl As Double = \"-\" & ((b.Tolerance.Upper * 180) / PI)\n\t\t\t'MsgBox(\"+\"&(b.Tolerance.Upper*10).ToString)\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = Tol_ang & \"°\"'du '\"=\"+\"\" &(b.Tolerance.Upper*10)'\"p\"'\"+\" & b.Tolerance.Upper*10\n\t\t\toCells.Item(i, 4).value = Tol_ang & \"°\"'\"-\" &(b.Tolerance.Lower*10)'\"q\"'\"-\" &b.Tolerance.Lower*10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31246 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))'Replace(b.Text.Text.ToString,\"-\",\"\")\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\tEnd If\n\t'If b.DimensionType = DimensionTypeEnum.\n\t'End If\n\tIf b.DimensionType = DimensionTypeEnum.kAngularForeshortenedDimensionType Then  'Partie cote angulaire\n\n\n\n\n\n\t\tIf b.Tolerance.ToleranceType = 31236 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = ((b.Tolerance.Upper * 180) / PI) & \"°\"\n\t\t\toCells.Item(i, 4).value = ((b.Tolerance.Lower * 180) / PI) & \"°\"\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = ((b.Tolerance.Upper * 180) / PI) & \"°\"\n\t\t\toCells.Item(i, 4).value = ((b.Tolerance.Lower * 180) / PI) & \"°\"\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31235 Then\n\t\t\tDim du As Double = \"+\" & ((b.Tolerance.Upper * 180) / PI) '& \"°\"\n\t\t\tDim dl As Double = \"-\" & ((b.Tolerance.Upper * 180) / PI) '& \"°\"\n\t\t\t'MsgBox(\"+\"&(b.Tolerance.Upper*10).ToString)\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = Tol_ang & \"°\"'du '\"=\"+\"\" &(b.Tolerance.Upper*10)'\"p\"'\"+\" & b.Tolerance.Upper*10\n\t\t\toCells.Item(i, 4).value = Tol_ang & \"°\"'\"-\" &(b.Tolerance.Lower*10)'\"q\"'\"-\" &b.Tolerance.Lower*10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31246 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))'Replace(b.Text.Text.ToString,\"-\",\"\")\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\tEnd If\nIf b.DimensionType = DimensionTypeEnum.kDiametricDimensionType Then\n\t\n\t\tIf b.Tolerance.ToleranceType = 31236 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31244 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = Tol_line\n\t\t\toCells.Item(i, 4).value = Tol_line\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31235 Then\n\t\t\tDim du As Double = \"+\" & (b.Tolerance.Upper * 10)\n\t\t\tDim dl As Double = \"-\" & (b.Tolerance.Upper * 10)\n\t\t\t'MsgBox(\"+\"&(b.Tolerance.Upper*10).ToString)\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10'du '\"=\"+\"\" &(b.Tolerance.Upper*10)'\"p\"'\"+\" & b.Tolerance.Upper*10\n\t\t\toCells.Item(i, 4).value = dl'\"-\" &(b.Tolerance.Lower*10)'\"q\"'\"-\" &b.Tolerance.Lower*10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31246 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))'Replace(b.Text.Text.ToString,\"-\",\"\")\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))\n\t\t\toCells.Item(i, 3).value = Tol_line\n\t\t\toCells.Item(i, 4).value = \"-\" & Tol_line\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\n\tEnd If\n\t\n\tIf b.DimensionType = DimensionTypeEnum.kAlignedDimensionType Then\n\t\n\t\tIf b.Tolerance.ToleranceType = 31236 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31244 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31235 Then\n\t\t\tDim du As Double = \"+\" & (b.Tolerance.Upper * 10)\n\t\t\tDim dl As Double = \"-\" & (b.Tolerance.Upper * 10)\n\t\t\t'MsgBox(\"+\"&(b.Tolerance.Upper*10).ToString)\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10'du '\"=\"+\"\" &(b.Tolerance.Upper*10)'\"p\"'\"+\" & b.Tolerance.Upper*10\n\t\t\toCells.Item(i, 4).value = dl'\"-\" &(b.Tolerance.Lower*10)'\"q\"'\"-\" &b.Tolerance.Lower*10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31246 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))'Replace(b.Text.Text.ToString,\"-\",\"\")\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))\n\t\t\toCells.Item(i, 3).value = Tol_line\n\t\t\toCells.Item(i, 4).value = \"-\" & Tol_line\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\n\tEnd If\n\t\n\tIf b.DimensionType = DimensionTypeEnum.kAlignedToCurveDimensionType Then\n\t\n\t\tIf b.Tolerance.ToleranceType = 31236 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31244 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31235 Then\n\t\t\tDim du As Double = \"+\" & (b.Tolerance.Upper * 10)\n\t\t\tDim dl As Double = \"-\" & (b.Tolerance.Upper * 10)\n\t\t\t'MsgBox(\"+\"&(b.Tolerance.Upper*10).ToString)\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10'du '\"=\"+\"\" &(b.Tolerance.Upper*10)'\"p\"'\"+\" & b.Tolerance.Upper*10\n\t\t\toCells.Item(i, 4).value = d1'\"-\" &(b.Tolerance.Lower*10)'\"q\"'\"-\" &b.Tolerance.Lower*10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31246 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))'Replace(b.Text.Text.ToString,\"-\",\"\")\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))\n\t\t\toCells.Item(i, 3).value = Tol_line\n\t\t\toCells.Item(i, 4).value = \"-\" & Tol_line\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\n\tEnd If\n\t\n\tIf b.DimensionType = DimensionTypeEnum.kArcLengthDimensionType Then\n\t\n\t\tIf b.Tolerance.ToleranceType = 31236 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31244 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31235 Then\n\t\t\tDim du As Double = \"+\" & (b.Tolerance.Upper * 10)\n\t\t\tDim dl As Double = \"-\" & (b.Tolerance.Upper * 10)\n\t\t\t'MsgBox(\"+\"&(b.Tolerance.Upper*10).ToString)\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10'du '\"=\"+\"\" &(b.Tolerance.Upper*10)'\"p\"'\"+\" & b.Tolerance.Upper*10\n\t\t\toCells.Item(i, 4).value = dl'\"-\" &(b.Tolerance.Lower*10)'\"q\"'\"-\" &b.Tolerance.Lower*10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31246 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))'Replace(b.Text.Text.ToString,\"-\",\"\")\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))\n\t\t\toCells.Item(i, 3).value = Tol_line\n\t\t\toCells.Item(i, 4).value = \"-\" & Tol_line\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\n\tEnd If\n\t\n\t\n\tIf b.DimensionType = DimensionTypeEnum.kArcLengthForeshortenedDimensionType Then\n\t\n\t\tIf b.Tolerance.ToleranceType = 31236 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31244 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31235 Then\n\t\t\tDim du As Double = \"+\" & (b.Tolerance.Upper * 10)\n\t\t\tDim dl As Double = \"-\" & (b.Tolerance.Upper * 10)\n\t\t\t'MsgBox(\"+\"&(b.Tolerance.Upper*10).ToString)\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10'du '\"=\"+\"\" &(b.Tolerance.Upper*10)'\"p\"'\"+\" & b.Tolerance.Upper*10\n\t\t\toCells.Item(i, 4).value = dl'\"-\" &(b.Tolerance.Lower*10)'\"q\"'\"-\" &b.Tolerance.Lower*10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31246 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))'Replace(b.Text.Text.ToString,\"-\",\"\")\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))\n\t\t\toCells.Item(i, 3).value = Tol_line\n\t\t\toCells.Item(i, 4).value = \"-\" & Tol_line\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\n\tEnd If\n\t\n\tIf b.DimensionType = DimensionTypeEnum.kHorizontalDimensionType Then\n\t\n\t\tIf b.Tolerance.ToleranceType = 31236 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31244 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31235 Then\n\t\t\tDim du As Double = \"+\" & (b.Tolerance.Upper * 10)\n\t\t\tDim dl As Double = \"-\" & (b.Tolerance.Upper * 10)\n\t\t\t'MsgBox(\"+\"&(b.Tolerance.Upper*10).ToString)\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10'du '\"=\"+\"\" &(b.Tolerance.Upper*10)'\"p\"'\"+\" & b.Tolerance.Upper*10\n\t\t\toCells.Item(i, 4).value = dl'\"-\" &(b.Tolerance.Lower*10)'\"q\"'\"-\" &b.Tolerance.Lower*10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31246 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))'Replace(b.Text.Text.ToString,\"-\",\"\")\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))\n\t\t\toCells.Item(i, 3).value = Tol_line\n\t\t\toCells.Item(i, 4).value = \"-\" & Tol_line\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\n\tEnd If\n\t\n\tIf b.DimensionType = DimensionTypeEnum.kLinearForeshortenedDimensionType Then\n\t\n\t\tIf b.Tolerance.ToleranceType = 31236 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31244 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31235 Then\n\t\t\tDim du As Double = \"+\" & (b.Tolerance.Upper * 10)\n\t\t\tDim dl As Double = \"-\" & (b.Tolerance.Upper * 10)\n\t\t\t'MsgBox(\"+\"&(b.Tolerance.Upper*10).ToString)\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10'du '\"=\"+\"\" &(b.Tolerance.Upper*10)'\"p\"'\"+\" & b.Tolerance.Upper*10\n\t\t\toCells.Item(i, 4).value = dl'\"-\" &(b.Tolerance.Lower*10)'\"q\"'\"-\" &b.Tolerance.Lower*10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31246 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))'Replace(b.Text.Text.ToString,\"-\",\"\")\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))\n\t\t\toCells.Item(i, 3).value = Tol_line\n\t\t\toCells.Item(i, 4).value = \"-\" & Tol_line\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\n\tEnd If\n\t\n\tIf b.DimensionType = DimensionTypeEnum.kNormalToCurveDimensionType Then\n\t\n\t\tIf b.Tolerance.ToleranceType = 31236 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31244 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31235 Then\n\t\t\tDim du As Double = \"+\" & (b.Tolerance.Upper * 10)\n\t\t\tDim dl As Double = \"-\" & (b.Tolerance.Upper * 10)\n\t\t\t\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = dl'\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31246 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))\n\t\t\toCells.Item(i, 3).value = Tol_line\n\t\t\toCells.Item(i, 4).value = \"-\" & Tol_line\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\n\tEnd If\n\t\n\t\n\tIf b.DimensionType = DimensionTypeEnum.kParallelDiametricDimensionType Then\n\t\n\t\tIf b.Tolerance.ToleranceType = 31236 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31244 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = Tol_line\n\t\t\toCells.Item(i, 4).value = Tol_line\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31235 Then\n\t\t\tDim du As Double = \"+\" & (b.Tolerance.Upper * 10)\n\t\t\tDim dl As Double = \"-\" & (b.Tolerance.Upper * 10)\n\t\t\t'MsgBox(\"+\"&(b.Tolerance.Upper*10).ToString)\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10'du '\"=\"+\"\" &(b.Tolerance.Upper*10)'\"p\"'\"+\" & b.Tolerance.Upper*10\n\t\t\toCells.Item(i, 4).value = dl'\"-\" &(b.Tolerance.Lower*10)'\"q\"'\"-\" &b.Tolerance.Lower*10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31246 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))'Replace(b.Text.Text.ToString,\"-\",\"\")\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))\n\t\t\toCells.Item(i, 3).value = Tol_line\n\t\t\toCells.Item(i, 4).value = \"-\" & Tol_line\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\n\tEnd If\n\t\n\tIf b.DimensionType = DimensionTypeEnum.kSymmetricDimensionType Then\n\t\n\t\tIf b.Tolerance.ToleranceType = 31236 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31244 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31235 Then\n\t\t\tDim du As Double = \"+\" & (b.Tolerance.Upper * 10)\n\t\t\tDim dl As Double = \"-\" & (b.Tolerance.Upper * 10)\n\t\t\t'MsgBox(\"+\"&(b.Tolerance.Upper*10).ToString)\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10'du '\"=\"+\"\" &(b.Tolerance.Upper*10)'\"p\"'\"+\" & b.Tolerance.Upper*10\n\t\t\toCells.Item(i, 4).value = dl'\"-\" &(b.Tolerance.Lower*10)'\"q\"'\"-\" &b.Tolerance.Lower*10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31246 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))'Replace(b.Text.Text.ToString,\"-\",\"\")\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))\n\t\t\toCells.Item(i, 3).value = Tol_line\n\t\t\toCells.Item(i, 4).value = \"-\" & Tol_line\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\n\tEnd If\n\t\n\tIf b.DimensionType = DimensionTypeEnum.kVerticalDimensionType Then\n\t\n\t\tIf b.Tolerance.ToleranceType = 31236 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31244 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\n\t\tEnd If\n\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31235 Then\n\t\t\tDim du As Double = \"+\" & (b.Tolerance.Upper * 10)\n\t\t\tDim dl As Double = \"-\" & (b.Tolerance.Upper * 10)\n\t\t\t'MsgBox(\"+\"&(b.Tolerance.Upper*10).ToString)\n\t\t\toCells.Item(i, 2).value = b.Text.Text\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10'du '\"=\"+\"\" &(b.Tolerance.Upper*10)'\"p\"'\"+\" & b.Tolerance.Upper*10\n\t\t\toCells.Item(i, 4).value = dl'\"-\" &(b.Tolerance.Lower*10)'\"q\"'\"-\" &b.Tolerance.Lower*10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31246 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))'Replace(b.Text.Text.ToString,\"-\",\"\")\n\t\t\toCells.Item(i, 3).value = b.Tolerance.Upper * 10\n\t\t\toCells.Item(i, 4).value = b.Tolerance.Lower * 10\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\t\tIf b.Tolerance.ToleranceType = 31233 Then\n\t\t\toCells.Item(i, 2).value = (Replace((Replace(b.Text.Text.ToString, \"(\", \"\")), \")\", \"\"))\n\t\t\toCells.Item(i, 3).value = Tol_line\n\t\t\toCells.Item(i, 4).value = \"-\" & Tol_line\n\t\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\t\tEnd If\n\n\t\n\tEnd If\n\t\n\t\n\n\n\t\n\n\n\n\n\n\n\n\n\nNext\n\n\nFor Each d As Inventor.DrawingNote In s.DrawingNotes\n\ti = i + 1\n\n\tDim O As Integer = d.Position.X\n\tDim P As Integer = d.Position.Y\n\n\tIf s.Size = 9997 Then 'format de feuille\n\t\tIf s.Orientation = 10243 Then 'Portrait\n\n\t\t\tIf O<5.75 Then\n\t\t\t\tord = \"D\"\n\t\t\tEnd If\n\n\t\t\tIf O >5.75 Then\n\t\t\t\tIf O<10.5 Then\n\t\t\t\t\tord = \"C\"\n\t\t\t\tEnd If\n\t\t\tEnd If\n\n\t\t\tIf O >10.5 Then\n\t\t\t\tIf O<15.25 Then\n\t\t\t\t\tord = \"B\"\n\t\t\t\tEnd If\n\t\t\tEnd If\n\n\t\t\tIf O >15.25 Then\n\t\t\t\tord = \"A\"\n\t\t\tEnd If\n\n\t\t\tIf P < 7.925 Then\n\t\t\t\tabss = \"1\"\n\t\t\tEnd If\n\n\t\t\tIf P >7.925 Then\n\t\t\t\tIf x<14.85 Then\n\t\t\t\t\tabss = \"2\"\n\t\t\t\tEnd If\n\t\t\tEnd If\n\n\n\t\t\tIf P >14.85 Then\n\t\t\t\tIf x<21.775 Then\n\t\t\t\t\tabss = \"3\"\n\t\t\t\tEnd If\n\t\t\tEnd If\n\n\t\t\tIf P >21.775 Then\n\n\t\t\t\tabss = \"4\"\n\t\t\tEnd If\n\t\tEnd If\n\t\tIf s.Orientation = 10242 Then 'Paysage\n\n\t\t\tIf O<7.925 Then\n\t\t\t\tord = \"D\"\n\t\t\tEnd If\n\n\t\t\tIf O >7.925 Then\n\t\t\t\tIf x<14.85 Then\n\t\t\t\t\tord = \"C\"\n\t\t\t\tEnd If\n\t\t\tEnd If\n\n\t\t\tIf O >14.85 Then\n\t\t\t\tIf x<21.775 Then\n\t\t\t\t\tord = \"B\"\n\t\t\t\tEnd If\n\t\t\tEnd If\n\n\t\t\tIf O >21.775 Then\n\t\t\t\tord = \"A\"\n\t\t\tEnd If\n\n\t\t\tIf P < 5.75 Then\n\t\t\t\tabss = \"1\"\n\t\t\tEnd If\n\n\t\t\tIf P >5.75 Then\n\t\t\t\tIf x<10.5 Then\n\t\t\t\t\tabss = \"2\"\n\t\t\t\tEnd If\n\t\t\tEnd If\n\n\n\t\t\tIf P >10.5 Then\n\t\t\t\tIf x<15.25 Then\n\t\t\t\t\tabss = \"3\"\n\t\t\t\tEnd If\n\t\t\tEnd If\n\n\t\t\tIf P >15.25 Then\n\n\t\t\t\tabss = \"4\"\n\t\t\tEnd If\n\n\t\tEnd If\n\n\tEnd If\n\tIf d.Type = 117488384 Then\n\n\t\toCells.Item(i, 2).value = d.Text\n\t\toCells.Item(i, 1).value = ord & \"-\" & abss\n\n\tEnd If\n\tNext\n\t\n\n\n\noWB.SaveAs(\"C:\\TravailVault\\\" & a.DisplayName & \".xlsx\")\n\noWB.Close",
                "publishDate": "2023-03-21",
                "caasKey": "caas/discussion/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Exporting-a-dimension-list-to-an-excel-sheet/td-p/11836356.html",
                "sourceLabel": "Forum",
                "knowledgeSource": [
                    "Accepted Solutions In Forums"
                ]
            },
            {
                "url": "https://help.autodesk.com/cloudhelp/2023/ENU/Inventor-Help/files/GUID-BD012197-71AB-45A9-B3B4-F4D4D4E8535D.htm",
                "title": "To Insert or Break Links in Models and Drawings",
                "snippet": "The application for the  <span class=\"vivbold qt0\"> object </span>  type opens so that you can create the  <span class=\"vivbold qt0\"> object </span> .",
                "source": "CloudHelp",
                "shortDescription": "You can link or embed external files in an Inventor model or drawing.",
                "publishDate": "2024-07-08",
                "topicId": "GUID-BD012197-71AB-45A9-B3B4-F4D4D4E8535D",
                "caasKey": "caas/CloudHelp/cloudhelp/2023/ENU/Inventor-Help/files/GUID-BD012197-71AB-45A9-B3B4-F4D4D4E8535D-htm.html",
                "knowledgeSource": [
                    "Product Documentation"
                ]
            },
            {
                "url": "https://help.autodesk.com/cloudhelp/2023/ENU/Inventor-Help/files/GUID-408A5AA8-084B-4CAA-AF57-C97947027247.htm",
                "title": "About Placement Help in iFeatures",
                "snippet": "You can embed or link placement help in various formats to an iFeature: Placement Help to an iFeature can be a Word document or spreadsheet.",
                "source": "CloudHelp",
                "shortDescription": "You can embed or link placement help in various formats to an iFeature:",
                "publishDate": "2024-07-08",
                "topicId": "GUID-408A5AA8-084B-4CAA-AF57-C97947027247",
                "caasKey": "caas/CloudHelp/cloudhelp/2023/ENU/Inventor-Help/files/GUID-408A5AA8-084B-4CAA-AF57-C97947027247-htm.html",
                "knowledgeSource": [
                    "Product Documentation"
                ]
            },
            {
                "url": "https://forums.autodesk.com/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Creating-multiple-dimensions-annotations-in-dwg-with-iLogic/td-p/9684788",
                "title": "Creating multiple dimensions/annotations in dwg with iLogic",
                "snippet": "I don't fully understand what oWPs are and how to use them since i never declared anything as oWPs, i only have oWP1, oWP2 etc error \" 2Ddwg, in document: wormwielconfiguratorv3  <span class=\"vivbold qt0\"> Object </span>  reference not set to an instance of an  <span class=\"vivbold qt0\"> object </span> .\"",
                "source": "discussion",
                "shortDescription": "Hi, \n\n \n\nI need some help with iLogic, i'm not a programmer so any advice to help me learn is appreciated.\n\n \n\nI currently have: a iLogic code that automatically places a dimension on a certain modelview in my .dwg, through using workpoints in my assembly. (thanks to @JhoelForshav and @WCrihfield)\n\n \n\nGoal: i want to do this with many workpoints to basically generate the entire drawing.\n\n \n\nThe code below is what i currently have, it works perfectly for placing one dimension on one view inside my dwg.\n\nIn order to achieve my goal i need to adjust the code. I placed comments in the code of what i think i need to change in order to make it work. I would like some feedback on my comments so i know i'm heading in the right direction, and also advice on the comments with question marks, since i don't know how to solve these exactly. \n\n \n\nMany thanks!\n\n '---------------------- GENERAL STUFF, no custom adjustments needed for more annotations/dimensions  -------------------------\n\n'Drawing Document...\nIf ThisApplication.ActiveDocumentType <> DocumentTypeEnum.kDrawingDocumentObject Then\n\tMsgBox(\"This rule '\" & iLogicVb.RuleName & \"' only works for Drawing Documents.\",vbOKOnly, \"WRONG DOCUMENT TYPE\")\n\tReturn\nEnd If\nDim oDDoc As DrawingDocument = ThisDrawing.Document\nIf oDDoc Is Nothing Then MsgBox(\"No Active Drawing Document Found. Exiting.\") : Return\n\n'Model Document....\nIf ThisDrawing.ModelDocument Is Nothing Then\n\tMsgBox(\"There is no model document associated with this drawing. Exiting.\", vbOKOnly + vbExclamation, \" \")\n\tReturn\nEnd If\nDim oMDocType As DocumentTypeEnum = ThisDrawing.ModelDocument.DocumentType\nDim oADoc As AssemblyDocument\nDim oADef As AssemblyComponentDefinition\nIf oMDocType = DocumentTypeEnum.kAssemblyDocumentObject Then\n\toADoc = ThisDrawing.ModelDocument\n\toADef = oADoc.ComponentDefinition\nElse\n\tMsgBox(\"The main model file being reference by this drawing is not an assembly.\" & vbCrLf & _\n\t\"This rule only works when the model is an assembly document. Exiting.\", vbOKOnly + vbExclamation, \" \")\n\tReturn\nEnd If\n\nDim oSheet As Sheet = oDDoc.Sheets.Item(1)\n\n'------------------- SPECIFIC STUFF, i need to adjust the code below to create multiple annotations/dimensions isntead of just one. ------------------\n\nDim oView As DrawingView\nFor Each oDView As DrawingView In oSheet.DrawingViews\n\tIf oDView.Name.Contains(\"View2\") Then\n\t\toView = oDView\n\tEnd If\nNext\n\n'have to create seperate view dims i assume? replace block above with block below? do i need to declare oDview anywhere?\n\n'Dim oView1 As DrawingView\n'Dim oView2 As DrawingView\n'Dim oView3 As DrawingView\n\n'For Each oDView As DrawingView In oSheet.DrawingViews\n'\tIf \t\toDView.Name.Contains(\"View1\") Then\n'\t\t\toView1 = oDView1\n'\tElse If oDView.Name.Contains(\"View2\") Then\n'\t\t\toView2 = oDView2\n'\tElse If oDView.Name.Contains(\"View3\") Then\n'\t\t\toView3 = oDView3\n'\tEnd If\n'Next\n\nIf oView Is Nothing Then\n\tMsgBox(\"Couln't find a sheet with 'View2' in its name. Exiting.\", vbOKOnly + vbExclamation, \"VIEW NOT FOUND\")\n\tReturn\nEnd If\n\n\n\nDim oTG As TransientGeometry = ThisApplication.TransientGeometry\nDim oWP1 As WorkPoint\nDim oWP2 As WorkPoint\n'define all workpoints....\n'Dim oWPx As WorkPoint\n'etc\n\n\nTry\n\toWP1 = oADef.WorkPoints.Item(\"PS1\")\n\toWP2 = oADef.WorkPoints.Item(\"PE1\")\n'add all workpoints from my assembly to my workpoint definitions...\n'oWPx = oADef.WorkPoints.Item(\"x\")\n'etc\n\nCatch oEx As Exception\n\tMsgBox(\"Couldn't find WorkPoints, Exiting.\")\n\tReturn\nEnd Try\n\n\nDim oStyleMgr As DrawingStylesManager = oDDoc.StylesManager\nDim oCMStyle As CentermarkStyle\n\nTry\n\toCMStyle = oStyleMgr.CentermarkStyles.Item(\"Center Mark (ANSI)\")\n\nCatch oEx As Exception\n\toProceed = MsgBox(\"Coundn't find a CentermarkStyle named 'Center Mark (ANSI)'.\" & vbCrLf & _\n\t\"Do you want to proceed without specifying the Style?\", vbYesNo + vbQuestion, \"STYLE NOT FOUND\")\n\tIf oProceed = vbNo Then Return\nEnd Try\n\nDim oCP1 As Centermark = oSheet.Centermarks.AddByWorkFeature(oWP1, oView, oCMStyle)\nDim oCP2 As Centermark = oSheet.Centermarks.AddByWorkFeature(oWP2, oView, oCMStyle)\n'add Centremarks..... replace above with example below\n'Dim oCPx As Centermark = oSheet.Centermarks.AddByWorkFeature(oWPx, oViewx, oCMStyle)\n'etc\n\nDim oInt1 As GeometryIntent = oSheet.CreateGeometryIntent(oCP1)\nDim oInt2 As GeometryIntent = oSheet.CreateGeometryIntent(oCP2)\n'add GeometryIntents..... replace above with example below\n'Dim oIntx As GeometryIntent = oSheet.CreateGeometryIntent(oCPx)\n'etc\n\n'I need the split the code below???? some views need both horizontal and vertical annotations.....\n'dont really know the best way of doing this, i guess i need to assign each dimension to be either a Horizontal dimension-\n'or a Vertical one sperately.....?????\n'also the placement heigh needs to be a different positions so i need to create about 3 different levels in case-\n'there are 3 vertical dimensions on the same view....????\n\nDim oPtText As Point2d\nDim oDimType As DimensionTypeEnum\nDim oHorV As String = \"Horizontal\" 'or \"Vertical\"\n\nIf oHorV = \"Horizontal\" Then\n\toDimType = DimensionTypeEnum.kHorizontalDimensionType\n\toPtText = oTG.CreatePoint2d(oView.Center.X,(oView.Top + 1))\nElse\n\toDimType = DimensionTypeEnum.kVerticalDimensionType\n\toPtText = oTG.CreatePoint2d((oView.Left-1),oView.Center.Y)\nEnd If\n\nDim oDim As DrawingDimension\n\nTry\n\toDim = oSheet.DrawingDimensions.GeneralDimensions.AddLinear(oPtText, oInt1, oInt2, oDimType)\n'add all dimensions that are Linear.....\n'oDimx = oSheet.DrawingDimensions.GeneralDimensions.AddLinear(oPtText, oIntx, oIntx, oDimTypex)\n'etc\n\n\t\nCatch oEx As Exception\n\tMsgBox(\"The attempt to create the dimension failed.\" & vbCrLf & _\n\t\"The Error message is as follows:\" & vbCrLf & _\n\toEx.Message & vbCrLf & vbCrLf & _\n\t\"The Source is as follows:\" & vbCrLf & _\n\toEx.Source, vbOKOnly + vbExclamation, \" \")\nEnd Try\n\n ",
                "publishDate": "2020-08-11",
                "caasKey": "caas/discussion/t5/Inventor-Programming-iLogic-Macros-AddIns-Apprentice/Creating-multiple-dimensions-annotations-in-dwg-with-iLogic/td-p/9684788.html",
                "sourceLabel": "Forum",
                "knowledgeSource": [
                    "Accepted Solutions In Forums"
                ]
            },
            {
                "url": "https://help.autodesk.com/cloudhelp/2023/ENU/Inventor-Help/files/GUID-B8F6E805-2E4B-4366-8FF6-33F0ED1C1C4A.htm",
                "title": "To Select and Deselect Objects",
                "snippet": "Select Click the arrow next to the Select command, and select the mode from the list. Select the  <span class=\"vivbold qt0\"> object </span>  in the graphics window. To select multiple  <span class=\"vivbold qt0\"> objects </span> , either SHIFT-click or CTRL-click unselected  <span class=\"vivbold qt0\"> objects </span>  to add them to the selection set.",
                "source": "CloudHelp",
                "publishDate": "2024-07-08",
                "topicId": "GUID-B8F6E805-2E4B-4366-8FF6-33F0ED1C1C4A",
                "caasKey": "caas/CloudHelp/cloudhelp/2023/ENU/Inventor-Help/files/GUID-B8F6E805-2E4B-4366-8FF6-33F0ED1C1C4A-htm.html",
                "knowledgeSource": [
                    "Product Documentation"
                ]
            },
            {
                "url": "https://help.autodesk.com/cloudhelp/2023/ENU/Inventor-Help/files/GUID-77FC2A15-D7DF-45D1-969D-276896ADA5FD.htm",
                "title": "Datum object is missing",
                "snippet": "When the datum plane or axis is missing, the datum is considered a failed  <span class=\"vivbold qt0\"> object </span>  and the message Failed  <span class=\"vivbold qt0\"> objects </span>  in the model also displays.",
                "source": "CloudHelp",
                "publishDate": "2024-07-08",
                "topicId": "GUID-77FC2A15-D7DF-45D1-969D-276896ADA5FD",
                "caasKey": "caas/CloudHelp/cloudhelp/2023/ENU/Inventor-Help/files/GUID-77FC2A15-D7DF-45D1-969D-276896ADA5FD-htm.html",
                "knowledgeSource": [
                    "Product Documentation"
                ]
            },
            {
                "url": "https://help.autodesk.com/cloudhelp/2023/ENU/Inventor-Help/files/GUID-415A34D2-8D3C-41FE-BB7F-D4C2D91C9BF9.htm",
                "title": "Copy Object Reference",
                "snippet": "Access Ribbon: 3D Model tab Modify panel Copy  <span class=\"vivbold qt0\"> Object </span>  Ribbon: Construction tab Manage panel Copy  <span class=\"vivbold qt0\"> Object </span>  Available in a part (.ipt) file or, if you have Inventor, in an assembly (.iam) file when editing a part within the assembly context.",
                "source": "CloudHelp",
                "publishDate": "2024-07-08",
                "topicId": "GUID-415A34D2-8D3C-41FE-BB7F-D4C2D91C9BF9",
                "caasKey": "caas/CloudHelp/cloudhelp/2023/ENU/Inventor-Help/files/GUID-415A34D2-8D3C-41FE-BB7F-D4C2D91C9BF9-htm.html",
                "knowledgeSource": [
                    "Product Documentation"
                ]
            }
        ]
    }
}